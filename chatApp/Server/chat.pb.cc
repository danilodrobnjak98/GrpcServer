// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#include "chat.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ChatApp {
PROTOBUF_CONSTEXPR RegisterReq::RegisterReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterReqDefaultTypeInternal() {}
  union {
    RegisterReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterReqDefaultTypeInternal _RegisterReq_default_instance_;
PROTOBUF_CONSTEXPR RegisterResp::RegisterResp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.messageconfirmation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterRespDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterRespDefaultTypeInternal() {}
  union {
    RegisterResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterRespDefaultTypeInternal _RegisterResp_default_instance_;
PROTOBUF_CONSTEXPR ChooseParticipantReq::ChooseParticipantReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clientname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.partnername_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChooseParticipantReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChooseParticipantReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChooseParticipantReqDefaultTypeInternal() {}
  union {
    ChooseParticipantReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChooseParticipantReqDefaultTypeInternal _ChooseParticipantReq_default_instance_;
PROTOBUF_CONSTEXPR ChooseParticipantResp::ChooseParticipantResp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.confirmation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChooseParticipantRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChooseParticipantRespDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChooseParticipantRespDefaultTypeInternal() {}
  union {
    ChooseParticipantResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChooseParticipantRespDefaultTypeInternal _ChooseParticipantResp_default_instance_;
PROTOBUF_CONSTEXPR SendMessageReq::SendMessageReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sendmessagereq_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.client_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.partnername_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SendMessageReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendMessageReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendMessageReqDefaultTypeInternal() {}
  union {
    SendMessageReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendMessageReqDefaultTypeInternal _SendMessageReq_default_instance_;
PROTOBUF_CONSTEXPR SendMessageResp::SendMessageResp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sendmessageresp_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SendMessageRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendMessageRespDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendMessageRespDefaultTypeInternal() {}
  union {
    SendMessageResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendMessageRespDefaultTypeInternal _SendMessageResp_default_instance_;
}  // namespace ChatApp
static ::_pb::Metadata file_level_metadata_chat_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_chat_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_chat_2eproto = nullptr;

const uint32_t TableStruct_chat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatApp::RegisterReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChatApp::RegisterReq, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatApp::RegisterResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChatApp::RegisterResp, _impl_.messageconfirmation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatApp::ChooseParticipantReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChatApp::ChooseParticipantReq, _impl_.clientname_),
  PROTOBUF_FIELD_OFFSET(::ChatApp::ChooseParticipantReq, _impl_.partnername_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatApp::ChooseParticipantResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChatApp::ChooseParticipantResp, _impl_.confirmation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatApp::SendMessageReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChatApp::SendMessageReq, _impl_.sendmessagereq_),
  PROTOBUF_FIELD_OFFSET(::ChatApp::SendMessageReq, _impl_.client_),
  PROTOBUF_FIELD_OFFSET(::ChatApp::SendMessageReq, _impl_.partnername_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatApp::SendMessageResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChatApp::SendMessageResp, _impl_.sendmessageresp_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ChatApp::RegisterReq)},
  { 7, -1, -1, sizeof(::ChatApp::RegisterResp)},
  { 14, -1, -1, sizeof(::ChatApp::ChooseParticipantReq)},
  { 22, -1, -1, sizeof(::ChatApp::ChooseParticipantResp)},
  { 29, -1, -1, sizeof(::ChatApp::SendMessageReq)},
  { 38, -1, -1, sizeof(::ChatApp::SendMessageResp)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ChatApp::_RegisterReq_default_instance_._instance,
  &::ChatApp::_RegisterResp_default_instance_._instance,
  &::ChatApp::_ChooseParticipantReq_default_instance_._instance,
  &::ChatApp::_ChooseParticipantResp_default_instance_._instance,
  &::ChatApp::_SendMessageReq_default_instance_._instance,
  &::ChatApp::_SendMessageResp_default_instance_._instance,
};

const char descriptor_table_protodef_chat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nchat.proto\022\007ChatApp\"\033\n\013RegisterReq\022\014\n\004"
  "name\030\001 \001(\t\"+\n\014RegisterResp\022\033\n\023messageCon"
  "firmation\030\001 \001(\t\"\?\n\024ChooseParticipantReq\022"
  "\022\n\nclientName\030\001 \001(\t\022\023\n\013partnerName\030\002 \001(\t"
  "\"-\n\025ChooseParticipantResp\022\024\n\014confirmatio"
  "n\030\001 \001(\t\"M\n\016SendMessageReq\022\026\n\016sendMessage"
  "Req\030\001 \001(\t\022\016\n\006client\030\002 \001(\t\022\023\n\013partnerName"
  "\030\003 \001(\t\"*\n\017SendMessageResp\022\027\n\017sendMessage"
  "Resp\030\001 \001(\t2\370\001\n\017ChatApplication\022A\n\016Regist"
  "erClient\022\024.ChatApp.RegisterReq\032\025.ChatApp"
  ".RegisterResp(\0010\001\022V\n\021ChooseParticipant\022\035"
  ".ChatApp.ChooseParticipantReq\032\036.ChatApp."
  "ChooseParticipantResp(\0010\001\022J\n\021SendMessage"
  "Client\022\027.ChatApp.SendMessageReq\032\030.ChatAp"
  "p.SendMessageResp(\0010\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_chat_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_chat_2eproto = {
    false, false, 589, descriptor_table_protodef_chat_2eproto,
    "chat.proto",
    &descriptor_table_chat_2eproto_once, nullptr, 0, 6,
    schemas, file_default_instances, TableStruct_chat_2eproto::offsets,
    file_level_metadata_chat_2eproto, file_level_enum_descriptors_chat_2eproto,
    file_level_service_descriptors_chat_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_chat_2eproto_getter() {
  return &descriptor_table_chat_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_chat_2eproto(&descriptor_table_chat_2eproto);
namespace ChatApp {

// ===================================================================

class RegisterReq::_Internal {
 public:
};

RegisterReq::RegisterReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChatApp.RegisterReq)
}
RegisterReq::RegisterReq(const RegisterReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ChatApp.RegisterReq)
}

inline void RegisterReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisterReq::~RegisterReq() {
  // @@protoc_insertion_point(destructor:ChatApp.RegisterReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void RegisterReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatApp.RegisterReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChatApp.RegisterReq.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatApp.RegisterReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChatApp.RegisterReq.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatApp.RegisterReq)
  return target;
}

size_t RegisterReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatApp.RegisterReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterReq::GetClassData() const { return &_class_data_; }


void RegisterReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterReq*>(&to_msg);
  auto& from = static_cast<const RegisterReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChatApp.RegisterReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterReq::CopyFrom(const RegisterReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatApp.RegisterReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterReq::IsInitialized() const {
  return true;
}

void RegisterReq::InternalSwap(RegisterReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[0]);
}

// ===================================================================

class RegisterResp::_Internal {
 public:
};

RegisterResp::RegisterResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChatApp.RegisterResp)
}
RegisterResp::RegisterResp(const RegisterResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterResp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.messageconfirmation_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.messageconfirmation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.messageconfirmation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_messageconfirmation().empty()) {
    _this->_impl_.messageconfirmation_.Set(from._internal_messageconfirmation(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ChatApp.RegisterResp)
}

inline void RegisterResp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.messageconfirmation_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.messageconfirmation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.messageconfirmation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisterResp::~RegisterResp() {
  // @@protoc_insertion_point(destructor:ChatApp.RegisterResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.messageconfirmation_.Destroy();
}

void RegisterResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterResp::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatApp.RegisterResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.messageconfirmation_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string messageConfirmation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_messageconfirmation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChatApp.RegisterResp.messageConfirmation"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatApp.RegisterResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string messageConfirmation = 1;
  if (!this->_internal_messageconfirmation().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_messageconfirmation().data(), static_cast<int>(this->_internal_messageconfirmation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChatApp.RegisterResp.messageConfirmation");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_messageconfirmation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatApp.RegisterResp)
  return target;
}

size_t RegisterResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatApp.RegisterResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string messageConfirmation = 1;
  if (!this->_internal_messageconfirmation().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_messageconfirmation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterResp::GetClassData() const { return &_class_data_; }


void RegisterResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterResp*>(&to_msg);
  auto& from = static_cast<const RegisterResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChatApp.RegisterResp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_messageconfirmation().empty()) {
    _this->_internal_set_messageconfirmation(from._internal_messageconfirmation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterResp::CopyFrom(const RegisterResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatApp.RegisterResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterResp::IsInitialized() const {
  return true;
}

void RegisterResp::InternalSwap(RegisterResp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.messageconfirmation_, lhs_arena,
      &other->_impl_.messageconfirmation_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[1]);
}

// ===================================================================

class ChooseParticipantReq::_Internal {
 public:
};

ChooseParticipantReq::ChooseParticipantReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChatApp.ChooseParticipantReq)
}
ChooseParticipantReq::ChooseParticipantReq(const ChooseParticipantReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChooseParticipantReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clientname_){}
    , decltype(_impl_.partnername_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clientname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientname().empty()) {
    _this->_impl_.clientname_.Set(from._internal_clientname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.partnername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partnername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_partnername().empty()) {
    _this->_impl_.partnername_.Set(from._internal_partnername(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ChatApp.ChooseParticipantReq)
}

inline void ChooseParticipantReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clientname_){}
    , decltype(_impl_.partnername_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.clientname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.partnername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partnername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChooseParticipantReq::~ChooseParticipantReq() {
  // @@protoc_insertion_point(destructor:ChatApp.ChooseParticipantReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChooseParticipantReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clientname_.Destroy();
  _impl_.partnername_.Destroy();
}

void ChooseParticipantReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChooseParticipantReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatApp.ChooseParticipantReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clientname_.ClearToEmpty();
  _impl_.partnername_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChooseParticipantReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string clientName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_clientname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChatApp.ChooseParticipantReq.clientName"));
        } else
          goto handle_unusual;
        continue;
      // string partnerName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_partnername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChatApp.ChooseParticipantReq.partnerName"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChooseParticipantReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatApp.ChooseParticipantReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string clientName = 1;
  if (!this->_internal_clientname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientname().data(), static_cast<int>(this->_internal_clientname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChatApp.ChooseParticipantReq.clientName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clientname(), target);
  }

  // string partnerName = 2;
  if (!this->_internal_partnername().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partnername().data(), static_cast<int>(this->_internal_partnername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChatApp.ChooseParticipantReq.partnerName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_partnername(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatApp.ChooseParticipantReq)
  return target;
}

size_t ChooseParticipantReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatApp.ChooseParticipantReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clientName = 1;
  if (!this->_internal_clientname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientname());
  }

  // string partnerName = 2;
  if (!this->_internal_partnername().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partnername());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChooseParticipantReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChooseParticipantReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChooseParticipantReq::GetClassData() const { return &_class_data_; }


void ChooseParticipantReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChooseParticipantReq*>(&to_msg);
  auto& from = static_cast<const ChooseParticipantReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChatApp.ChooseParticipantReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_clientname().empty()) {
    _this->_internal_set_clientname(from._internal_clientname());
  }
  if (!from._internal_partnername().empty()) {
    _this->_internal_set_partnername(from._internal_partnername());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChooseParticipantReq::CopyFrom(const ChooseParticipantReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatApp.ChooseParticipantReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChooseParticipantReq::IsInitialized() const {
  return true;
}

void ChooseParticipantReq::InternalSwap(ChooseParticipantReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientname_, lhs_arena,
      &other->_impl_.clientname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.partnername_, lhs_arena,
      &other->_impl_.partnername_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ChooseParticipantReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[2]);
}

// ===================================================================

class ChooseParticipantResp::_Internal {
 public:
};

ChooseParticipantResp::ChooseParticipantResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChatApp.ChooseParticipantResp)
}
ChooseParticipantResp::ChooseParticipantResp(const ChooseParticipantResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChooseParticipantResp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.confirmation_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.confirmation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.confirmation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_confirmation().empty()) {
    _this->_impl_.confirmation_.Set(from._internal_confirmation(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ChatApp.ChooseParticipantResp)
}

inline void ChooseParticipantResp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.confirmation_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.confirmation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.confirmation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChooseParticipantResp::~ChooseParticipantResp() {
  // @@protoc_insertion_point(destructor:ChatApp.ChooseParticipantResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChooseParticipantResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.confirmation_.Destroy();
}

void ChooseParticipantResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChooseParticipantResp::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatApp.ChooseParticipantResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.confirmation_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChooseParticipantResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string confirmation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_confirmation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChatApp.ChooseParticipantResp.confirmation"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChooseParticipantResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatApp.ChooseParticipantResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string confirmation = 1;
  if (!this->_internal_confirmation().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_confirmation().data(), static_cast<int>(this->_internal_confirmation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChatApp.ChooseParticipantResp.confirmation");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_confirmation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatApp.ChooseParticipantResp)
  return target;
}

size_t ChooseParticipantResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatApp.ChooseParticipantResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string confirmation = 1;
  if (!this->_internal_confirmation().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_confirmation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChooseParticipantResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChooseParticipantResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChooseParticipantResp::GetClassData() const { return &_class_data_; }


void ChooseParticipantResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChooseParticipantResp*>(&to_msg);
  auto& from = static_cast<const ChooseParticipantResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChatApp.ChooseParticipantResp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_confirmation().empty()) {
    _this->_internal_set_confirmation(from._internal_confirmation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChooseParticipantResp::CopyFrom(const ChooseParticipantResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatApp.ChooseParticipantResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChooseParticipantResp::IsInitialized() const {
  return true;
}

void ChooseParticipantResp::InternalSwap(ChooseParticipantResp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.confirmation_, lhs_arena,
      &other->_impl_.confirmation_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ChooseParticipantResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[3]);
}

// ===================================================================

class SendMessageReq::_Internal {
 public:
};

SendMessageReq::SendMessageReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChatApp.SendMessageReq)
}
SendMessageReq::SendMessageReq(const SendMessageReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendMessageReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sendmessagereq_){}
    , decltype(_impl_.client_){}
    , decltype(_impl_.partnername_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sendmessagereq_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sendmessagereq_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sendmessagereq().empty()) {
    _this->_impl_.sendmessagereq_.Set(from._internal_sendmessagereq(), 
      _this->GetArenaForAllocation());
  }
  _impl_.client_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client().empty()) {
    _this->_impl_.client_.Set(from._internal_client(), 
      _this->GetArenaForAllocation());
  }
  _impl_.partnername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partnername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_partnername().empty()) {
    _this->_impl_.partnername_.Set(from._internal_partnername(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ChatApp.SendMessageReq)
}

inline void SendMessageReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sendmessagereq_){}
    , decltype(_impl_.client_){}
    , decltype(_impl_.partnername_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sendmessagereq_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sendmessagereq_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.client_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.partnername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partnername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SendMessageReq::~SendMessageReq() {
  // @@protoc_insertion_point(destructor:ChatApp.SendMessageReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendMessageReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sendmessagereq_.Destroy();
  _impl_.client_.Destroy();
  _impl_.partnername_.Destroy();
}

void SendMessageReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendMessageReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatApp.SendMessageReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sendmessagereq_.ClearToEmpty();
  _impl_.client_.ClearToEmpty();
  _impl_.partnername_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendMessageReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sendMessageReq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sendmessagereq();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChatApp.SendMessageReq.sendMessageReq"));
        } else
          goto handle_unusual;
        continue;
      // string client = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_client();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChatApp.SendMessageReq.client"));
        } else
          goto handle_unusual;
        continue;
      // string partnerName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_partnername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChatApp.SendMessageReq.partnerName"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendMessageReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatApp.SendMessageReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sendMessageReq = 1;
  if (!this->_internal_sendmessagereq().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sendmessagereq().data(), static_cast<int>(this->_internal_sendmessagereq().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChatApp.SendMessageReq.sendMessageReq");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sendmessagereq(), target);
  }

  // string client = 2;
  if (!this->_internal_client().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client().data(), static_cast<int>(this->_internal_client().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChatApp.SendMessageReq.client");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_client(), target);
  }

  // string partnerName = 3;
  if (!this->_internal_partnername().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partnername().data(), static_cast<int>(this->_internal_partnername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChatApp.SendMessageReq.partnerName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_partnername(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatApp.SendMessageReq)
  return target;
}

size_t SendMessageReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatApp.SendMessageReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sendMessageReq = 1;
  if (!this->_internal_sendmessagereq().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sendmessagereq());
  }

  // string client = 2;
  if (!this->_internal_client().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client());
  }

  // string partnerName = 3;
  if (!this->_internal_partnername().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partnername());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendMessageReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendMessageReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendMessageReq::GetClassData() const { return &_class_data_; }


void SendMessageReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendMessageReq*>(&to_msg);
  auto& from = static_cast<const SendMessageReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChatApp.SendMessageReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sendmessagereq().empty()) {
    _this->_internal_set_sendmessagereq(from._internal_sendmessagereq());
  }
  if (!from._internal_client().empty()) {
    _this->_internal_set_client(from._internal_client());
  }
  if (!from._internal_partnername().empty()) {
    _this->_internal_set_partnername(from._internal_partnername());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendMessageReq::CopyFrom(const SendMessageReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatApp.SendMessageReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageReq::IsInitialized() const {
  return true;
}

void SendMessageReq::InternalSwap(SendMessageReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sendmessagereq_, lhs_arena,
      &other->_impl_.sendmessagereq_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_, lhs_arena,
      &other->_impl_.client_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.partnername_, lhs_arena,
      &other->_impl_.partnername_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SendMessageReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[4]);
}

// ===================================================================

class SendMessageResp::_Internal {
 public:
};

SendMessageResp::SendMessageResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChatApp.SendMessageResp)
}
SendMessageResp::SendMessageResp(const SendMessageResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendMessageResp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sendmessageresp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sendmessageresp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sendmessageresp_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sendmessageresp().empty()) {
    _this->_impl_.sendmessageresp_.Set(from._internal_sendmessageresp(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ChatApp.SendMessageResp)
}

inline void SendMessageResp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sendmessageresp_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sendmessageresp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sendmessageresp_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SendMessageResp::~SendMessageResp() {
  // @@protoc_insertion_point(destructor:ChatApp.SendMessageResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendMessageResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sendmessageresp_.Destroy();
}

void SendMessageResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendMessageResp::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatApp.SendMessageResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sendmessageresp_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendMessageResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sendMessageResp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sendmessageresp();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChatApp.SendMessageResp.sendMessageResp"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendMessageResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatApp.SendMessageResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sendMessageResp = 1;
  if (!this->_internal_sendmessageresp().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sendmessageresp().data(), static_cast<int>(this->_internal_sendmessageresp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChatApp.SendMessageResp.sendMessageResp");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sendmessageresp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatApp.SendMessageResp)
  return target;
}

size_t SendMessageResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatApp.SendMessageResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sendMessageResp = 1;
  if (!this->_internal_sendmessageresp().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sendmessageresp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendMessageResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendMessageResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendMessageResp::GetClassData() const { return &_class_data_; }


void SendMessageResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendMessageResp*>(&to_msg);
  auto& from = static_cast<const SendMessageResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChatApp.SendMessageResp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sendmessageresp().empty()) {
    _this->_internal_set_sendmessageresp(from._internal_sendmessageresp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendMessageResp::CopyFrom(const SendMessageResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatApp.SendMessageResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageResp::IsInitialized() const {
  return true;
}

void SendMessageResp::InternalSwap(SendMessageResp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sendmessageresp_, lhs_arena,
      &other->_impl_.sendmessageresp_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SendMessageResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ChatApp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ChatApp::RegisterReq*
Arena::CreateMaybeMessage< ::ChatApp::RegisterReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatApp::RegisterReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatApp::RegisterResp*
Arena::CreateMaybeMessage< ::ChatApp::RegisterResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatApp::RegisterResp >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatApp::ChooseParticipantReq*
Arena::CreateMaybeMessage< ::ChatApp::ChooseParticipantReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatApp::ChooseParticipantReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatApp::ChooseParticipantResp*
Arena::CreateMaybeMessage< ::ChatApp::ChooseParticipantResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatApp::ChooseParticipantResp >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatApp::SendMessageReq*
Arena::CreateMaybeMessage< ::ChatApp::SendMessageReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatApp::SendMessageReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatApp::SendMessageResp*
Arena::CreateMaybeMessage< ::ChatApp::SendMessageResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatApp::SendMessageResp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
