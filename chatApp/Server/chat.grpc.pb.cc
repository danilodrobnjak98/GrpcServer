// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: chat.proto

#include "chat.pb.h"
#include "chat.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace ChatApp {

static const char* ChatApplication_method_names[] = {
  "/ChatApp.ChatApplication/RegisterClient",
  "/ChatApp.ChatApplication/ChooseParticipant",
  "/ChatApp.ChatApplication/SendMessageClient",
};

std::unique_ptr< ChatApplication::Stub> ChatApplication::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ChatApplication::Stub> stub(new ChatApplication::Stub(channel, options));
  return stub;
}

ChatApplication::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RegisterClient_(ChatApplication_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_ChooseParticipant_(ChatApplication_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_SendMessageClient_(ChatApplication_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::ChatApp::RegisterReq, ::ChatApp::RegisterResp>* ChatApplication::Stub::RegisterClientRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::ChatApp::RegisterReq, ::ChatApp::RegisterResp>::Create(channel_.get(), rpcmethod_RegisterClient_, context);
}

void ChatApplication::Stub::async::RegisterClient(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::ChatApp::RegisterReq,::ChatApp::RegisterResp>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::ChatApp::RegisterReq,::ChatApp::RegisterResp>::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterClient_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::ChatApp::RegisterReq, ::ChatApp::RegisterResp>* ChatApplication::Stub::AsyncRegisterClientRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::ChatApp::RegisterReq, ::ChatApp::RegisterResp>::Create(channel_.get(), cq, rpcmethod_RegisterClient_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::ChatApp::RegisterReq, ::ChatApp::RegisterResp>* ChatApplication::Stub::PrepareAsyncRegisterClientRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::ChatApp::RegisterReq, ::ChatApp::RegisterResp>::Create(channel_.get(), cq, rpcmethod_RegisterClient_, context, false, nullptr);
}

::grpc::ClientReaderWriter< ::ChatApp::ChooseParticipantReq, ::ChatApp::ChooseParticipantResp>* ChatApplication::Stub::ChooseParticipantRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::ChatApp::ChooseParticipantReq, ::ChatApp::ChooseParticipantResp>::Create(channel_.get(), rpcmethod_ChooseParticipant_, context);
}

void ChatApplication::Stub::async::ChooseParticipant(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::ChatApp::ChooseParticipantReq,::ChatApp::ChooseParticipantResp>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::ChatApp::ChooseParticipantReq,::ChatApp::ChooseParticipantResp>::Create(stub_->channel_.get(), stub_->rpcmethod_ChooseParticipant_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::ChatApp::ChooseParticipantReq, ::ChatApp::ChooseParticipantResp>* ChatApplication::Stub::AsyncChooseParticipantRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::ChatApp::ChooseParticipantReq, ::ChatApp::ChooseParticipantResp>::Create(channel_.get(), cq, rpcmethod_ChooseParticipant_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::ChatApp::ChooseParticipantReq, ::ChatApp::ChooseParticipantResp>* ChatApplication::Stub::PrepareAsyncChooseParticipantRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::ChatApp::ChooseParticipantReq, ::ChatApp::ChooseParticipantResp>::Create(channel_.get(), cq, rpcmethod_ChooseParticipant_, context, false, nullptr);
}

::grpc::ClientReaderWriter< ::ChatApp::SendMessageReq, ::ChatApp::SendMessageResp>* ChatApplication::Stub::SendMessageClientRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::ChatApp::SendMessageReq, ::ChatApp::SendMessageResp>::Create(channel_.get(), rpcmethod_SendMessageClient_, context);
}

void ChatApplication::Stub::async::SendMessageClient(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::ChatApp::SendMessageReq,::ChatApp::SendMessageResp>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::ChatApp::SendMessageReq,::ChatApp::SendMessageResp>::Create(stub_->channel_.get(), stub_->rpcmethod_SendMessageClient_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::ChatApp::SendMessageReq, ::ChatApp::SendMessageResp>* ChatApplication::Stub::AsyncSendMessageClientRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::ChatApp::SendMessageReq, ::ChatApp::SendMessageResp>::Create(channel_.get(), cq, rpcmethod_SendMessageClient_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::ChatApp::SendMessageReq, ::ChatApp::SendMessageResp>* ChatApplication::Stub::PrepareAsyncSendMessageClientRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::ChatApp::SendMessageReq, ::ChatApp::SendMessageResp>::Create(channel_.get(), cq, rpcmethod_SendMessageClient_, context, false, nullptr);
}

ChatApplication::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatApplication_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< ChatApplication::Service, ::ChatApp::RegisterReq, ::ChatApp::RegisterResp>(
          [](ChatApplication::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::ChatApp::RegisterResp,
             ::ChatApp::RegisterReq>* stream) {
               return service->RegisterClient(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatApplication_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< ChatApplication::Service, ::ChatApp::ChooseParticipantReq, ::ChatApp::ChooseParticipantResp>(
          [](ChatApplication::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::ChatApp::ChooseParticipantResp,
             ::ChatApp::ChooseParticipantReq>* stream) {
               return service->ChooseParticipant(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatApplication_method_names[2],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< ChatApplication::Service, ::ChatApp::SendMessageReq, ::ChatApp::SendMessageResp>(
          [](ChatApplication::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::ChatApp::SendMessageResp,
             ::ChatApp::SendMessageReq>* stream) {
               return service->SendMessageClient(ctx, stream);
             }, this)));
}

ChatApplication::Service::~Service() {
}

::grpc::Status ChatApplication::Service::RegisterClient(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::ChatApp::RegisterResp, ::ChatApp::RegisterReq>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatApplication::Service::ChooseParticipant(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::ChatApp::ChooseParticipantResp, ::ChatApp::ChooseParticipantReq>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatApplication::Service::SendMessageClient(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::ChatApp::SendMessageResp, ::ChatApp::SendMessageReq>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ChatApp

