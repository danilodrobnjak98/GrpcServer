// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: chat.proto
#ifndef GRPC_chat_2eproto__INCLUDED
#define GRPC_chat_2eproto__INCLUDED

#include "chat.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace ChatApp {

class ChatApplication final {
 public:
  static constexpr char const* service_full_name() {
    return "ChatApp.ChatApplication";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::ChatApp::RegisterReq, ::ChatApp::RegisterResp>> RegisterClient(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::ChatApp::RegisterReq, ::ChatApp::RegisterResp>>(RegisterClientRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::ChatApp::RegisterReq, ::ChatApp::RegisterResp>> AsyncRegisterClient(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::ChatApp::RegisterReq, ::ChatApp::RegisterResp>>(AsyncRegisterClientRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::ChatApp::RegisterReq, ::ChatApp::RegisterResp>> PrepareAsyncRegisterClient(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::ChatApp::RegisterReq, ::ChatApp::RegisterResp>>(PrepareAsyncRegisterClientRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::ChatApp::ChooseParticipantReq, ::ChatApp::ChooseParticipantResp>> ChooseParticipant(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::ChatApp::ChooseParticipantReq, ::ChatApp::ChooseParticipantResp>>(ChooseParticipantRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::ChatApp::ChooseParticipantReq, ::ChatApp::ChooseParticipantResp>> AsyncChooseParticipant(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::ChatApp::ChooseParticipantReq, ::ChatApp::ChooseParticipantResp>>(AsyncChooseParticipantRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::ChatApp::ChooseParticipantReq, ::ChatApp::ChooseParticipantResp>> PrepareAsyncChooseParticipant(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::ChatApp::ChooseParticipantReq, ::ChatApp::ChooseParticipantResp>>(PrepareAsyncChooseParticipantRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::ChatApp::SendMessageReq, ::ChatApp::SendMessageResp>> SendMessageClient(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::ChatApp::SendMessageReq, ::ChatApp::SendMessageResp>>(SendMessageClientRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::ChatApp::SendMessageReq, ::ChatApp::SendMessageResp>> AsyncSendMessageClient(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::ChatApp::SendMessageReq, ::ChatApp::SendMessageResp>>(AsyncSendMessageClientRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::ChatApp::SendMessageReq, ::ChatApp::SendMessageResp>> PrepareAsyncSendMessageClient(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::ChatApp::SendMessageReq, ::ChatApp::SendMessageResp>>(PrepareAsyncSendMessageClientRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void RegisterClient(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::ChatApp::RegisterReq,::ChatApp::RegisterResp>* reactor) = 0;
      virtual void ChooseParticipant(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::ChatApp::ChooseParticipantReq,::ChatApp::ChooseParticipantResp>* reactor) = 0;
      virtual void SendMessageClient(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::ChatApp::SendMessageReq,::ChatApp::SendMessageResp>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderWriterInterface< ::ChatApp::RegisterReq, ::ChatApp::RegisterResp>* RegisterClientRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::ChatApp::RegisterReq, ::ChatApp::RegisterResp>* AsyncRegisterClientRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::ChatApp::RegisterReq, ::ChatApp::RegisterResp>* PrepareAsyncRegisterClientRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::ChatApp::ChooseParticipantReq, ::ChatApp::ChooseParticipantResp>* ChooseParticipantRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::ChatApp::ChooseParticipantReq, ::ChatApp::ChooseParticipantResp>* AsyncChooseParticipantRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::ChatApp::ChooseParticipantReq, ::ChatApp::ChooseParticipantResp>* PrepareAsyncChooseParticipantRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::ChatApp::SendMessageReq, ::ChatApp::SendMessageResp>* SendMessageClientRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::ChatApp::SendMessageReq, ::ChatApp::SendMessageResp>* AsyncSendMessageClientRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::ChatApp::SendMessageReq, ::ChatApp::SendMessageResp>* PrepareAsyncSendMessageClientRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReaderWriter< ::ChatApp::RegisterReq, ::ChatApp::RegisterResp>> RegisterClient(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::ChatApp::RegisterReq, ::ChatApp::RegisterResp>>(RegisterClientRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::ChatApp::RegisterReq, ::ChatApp::RegisterResp>> AsyncRegisterClient(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::ChatApp::RegisterReq, ::ChatApp::RegisterResp>>(AsyncRegisterClientRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::ChatApp::RegisterReq, ::ChatApp::RegisterResp>> PrepareAsyncRegisterClient(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::ChatApp::RegisterReq, ::ChatApp::RegisterResp>>(PrepareAsyncRegisterClientRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::ChatApp::ChooseParticipantReq, ::ChatApp::ChooseParticipantResp>> ChooseParticipant(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::ChatApp::ChooseParticipantReq, ::ChatApp::ChooseParticipantResp>>(ChooseParticipantRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::ChatApp::ChooseParticipantReq, ::ChatApp::ChooseParticipantResp>> AsyncChooseParticipant(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::ChatApp::ChooseParticipantReq, ::ChatApp::ChooseParticipantResp>>(AsyncChooseParticipantRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::ChatApp::ChooseParticipantReq, ::ChatApp::ChooseParticipantResp>> PrepareAsyncChooseParticipant(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::ChatApp::ChooseParticipantReq, ::ChatApp::ChooseParticipantResp>>(PrepareAsyncChooseParticipantRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::ChatApp::SendMessageReq, ::ChatApp::SendMessageResp>> SendMessageClient(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::ChatApp::SendMessageReq, ::ChatApp::SendMessageResp>>(SendMessageClientRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::ChatApp::SendMessageReq, ::ChatApp::SendMessageResp>> AsyncSendMessageClient(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::ChatApp::SendMessageReq, ::ChatApp::SendMessageResp>>(AsyncSendMessageClientRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::ChatApp::SendMessageReq, ::ChatApp::SendMessageResp>> PrepareAsyncSendMessageClient(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::ChatApp::SendMessageReq, ::ChatApp::SendMessageResp>>(PrepareAsyncSendMessageClientRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void RegisterClient(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::ChatApp::RegisterReq,::ChatApp::RegisterResp>* reactor) override;
      void ChooseParticipant(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::ChatApp::ChooseParticipantReq,::ChatApp::ChooseParticipantResp>* reactor) override;
      void SendMessageClient(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::ChatApp::SendMessageReq,::ChatApp::SendMessageResp>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReaderWriter< ::ChatApp::RegisterReq, ::ChatApp::RegisterResp>* RegisterClientRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::ChatApp::RegisterReq, ::ChatApp::RegisterResp>* AsyncRegisterClientRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::ChatApp::RegisterReq, ::ChatApp::RegisterResp>* PrepareAsyncRegisterClientRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::ChatApp::ChooseParticipantReq, ::ChatApp::ChooseParticipantResp>* ChooseParticipantRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::ChatApp::ChooseParticipantReq, ::ChatApp::ChooseParticipantResp>* AsyncChooseParticipantRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::ChatApp::ChooseParticipantReq, ::ChatApp::ChooseParticipantResp>* PrepareAsyncChooseParticipantRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::ChatApp::SendMessageReq, ::ChatApp::SendMessageResp>* SendMessageClientRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::ChatApp::SendMessageReq, ::ChatApp::SendMessageResp>* AsyncSendMessageClientRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::ChatApp::SendMessageReq, ::ChatApp::SendMessageResp>* PrepareAsyncSendMessageClientRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterClient_;
    const ::grpc::internal::RpcMethod rpcmethod_ChooseParticipant_;
    const ::grpc::internal::RpcMethod rpcmethod_SendMessageClient_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status RegisterClient(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::ChatApp::RegisterResp, ::ChatApp::RegisterReq>* stream);
    virtual ::grpc::Status ChooseParticipant(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::ChatApp::ChooseParticipantResp, ::ChatApp::ChooseParticipantReq>* stream);
    virtual ::grpc::Status SendMessageClient(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::ChatApp::SendMessageResp, ::ChatApp::SendMessageReq>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterClient() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RegisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterClient(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ChatApp::RegisterResp, ::ChatApp::RegisterReq>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterClient(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::ChatApp::RegisterResp, ::ChatApp::RegisterReq>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ChooseParticipant : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ChooseParticipant() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ChooseParticipant() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChooseParticipant(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ChatApp::ChooseParticipantResp, ::ChatApp::ChooseParticipantReq>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChooseParticipant(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::ChatApp::ChooseParticipantResp, ::ChatApp::ChooseParticipantReq>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendMessageClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendMessageClient() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SendMessageClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessageClient(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ChatApp::SendMessageResp, ::ChatApp::SendMessageReq>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendMessageClient(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::ChatApp::SendMessageResp, ::ChatApp::SendMessageReq>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RegisterClient<WithAsyncMethod_ChooseParticipant<WithAsyncMethod_SendMessageClient<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_RegisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegisterClient() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::ChatApp::RegisterReq, ::ChatApp::RegisterResp>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->RegisterClient(context); }));
    }
    ~WithCallbackMethod_RegisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterClient(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ChatApp::RegisterResp, ::ChatApp::RegisterReq>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::ChatApp::RegisterReq, ::ChatApp::RegisterResp>* RegisterClient(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ChooseParticipant : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ChooseParticipant() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::ChatApp::ChooseParticipantReq, ::ChatApp::ChooseParticipantResp>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->ChooseParticipant(context); }));
    }
    ~WithCallbackMethod_ChooseParticipant() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChooseParticipant(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ChatApp::ChooseParticipantResp, ::ChatApp::ChooseParticipantReq>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::ChatApp::ChooseParticipantReq, ::ChatApp::ChooseParticipantResp>* ChooseParticipant(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendMessageClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendMessageClient() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::ChatApp::SendMessageReq, ::ChatApp::SendMessageResp>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->SendMessageClient(context); }));
    }
    ~WithCallbackMethod_SendMessageClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessageClient(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ChatApp::SendMessageResp, ::ChatApp::SendMessageReq>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::ChatApp::SendMessageReq, ::ChatApp::SendMessageResp>* SendMessageClient(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_RegisterClient<WithCallbackMethod_ChooseParticipant<WithCallbackMethod_SendMessageClient<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RegisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterClient() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RegisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterClient(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ChatApp::RegisterResp, ::ChatApp::RegisterReq>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ChooseParticipant : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ChooseParticipant() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ChooseParticipant() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChooseParticipant(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ChatApp::ChooseParticipantResp, ::ChatApp::ChooseParticipantReq>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendMessageClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendMessageClient() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SendMessageClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessageClient(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ChatApp::SendMessageResp, ::ChatApp::SendMessageReq>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterClient() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RegisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterClient(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ChatApp::RegisterResp, ::ChatApp::RegisterReq>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterClient(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ChooseParticipant : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ChooseParticipant() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ChooseParticipant() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChooseParticipant(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ChatApp::ChooseParticipantResp, ::ChatApp::ChooseParticipantReq>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChooseParticipant(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendMessageClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendMessageClient() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SendMessageClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessageClient(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ChatApp::SendMessageResp, ::ChatApp::SendMessageReq>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendMessageClient(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegisterClient() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->RegisterClient(context); }));
    }
    ~WithRawCallbackMethod_RegisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterClient(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ChatApp::RegisterResp, ::ChatApp::RegisterReq>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* RegisterClient(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ChooseParticipant : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ChooseParticipant() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->ChooseParticipant(context); }));
    }
    ~WithRawCallbackMethod_ChooseParticipant() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChooseParticipant(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ChatApp::ChooseParticipantResp, ::ChatApp::ChooseParticipantReq>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* ChooseParticipant(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendMessageClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendMessageClient() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->SendMessageClient(context); }));
    }
    ~WithRawCallbackMethod_SendMessageClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessageClient(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ChatApp::SendMessageResp, ::ChatApp::SendMessageReq>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* SendMessageClient(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef Service StreamedService;
};

}  // namespace ChatApp


#endif  // GRPC_chat_2eproto__INCLUDED
